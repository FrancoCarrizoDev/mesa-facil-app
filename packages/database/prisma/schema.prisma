generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/mesa-facil?schema=public"
}

model User {
  id           String       @id @unique
  password     String
  username     String       @unique
  restaurants  Restaurant[]
  created_at   DateTime     @default(now())
  email        String       @unique
  updated_at   DateTime     @updatedAt
  last_login   DateTime?
  active       Boolean      @default(true)
  role         Role         @relation(fields: [role_id], references: [id])
  role_id      Int
  user_root_id String?
  user_root    User?        @relation("UserCreatedBy", fields: [user_root_id], references: [id])
  createdUsers User[]       @relation("UserCreatedBy")

  @@index([user_root_id], name: "user_root_id")
  @@map("user")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]

  @@map("role")
}

model Restaurant {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  phone              String
  address            String
  attention_schedule AttentionSchedule[]
  users              User[]
  slug               String?             @unique
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt

  @@index([slug], name: "slug")
  @@map("restaurant")
}

model AttentionSchedule {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant    Restaurant    @relation(fields: [restaurant_id], references: [id])
  restaurant_id String        @db.Uuid
  day_name      String
  day_number    Int
  opening_hours String
  ending_hours  String
  reservations  Reservation[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  @@index([restaurant_id], name: "restaurant_id")
  @@map("attention_schedule")
}

model Diner {
  id          String        @id @unique
  sub         String?       @unique
  first_name  String
  last_name   String?
  phone       String?
  email       String        @unique
  birthday    String?
  reservation Reservation[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@index([sub], name: "sub")
  @@index([email], name: "email")
  @@map("diner")
}

model Reservation {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attention_schedule    AttentionSchedule @relation(fields: [attention_schedule_id], references: [id])
  attention_schedule_id String            @db.Uuid
  diner                 Diner             @relation(fields: [diner_id], references: [id])
  diner_id              String
  date                  String
  people_quantity       Int
  message               String?
  table_number          Int?
  reservation_status_id ReservationStatus @relation(fields: [status_id], references: [id])
  status_id             Int
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  @@map("reservation")
}

model ReservationStatus {
  id          Int           @id @default(autoincrement())
  reservation Reservation[]
  status      String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@map("reservation_status")
}

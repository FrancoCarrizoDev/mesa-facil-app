generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @unique
  provider    String       @unique
  email       String       @unique
  password    String?
  first_name  String
  last_name   String?
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Restaurant {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  phone              String
  address            String
  attention_schedule AttentionSchedule[]
  user               User                @relation(fields: [user_id], references: [id])
  user_id            String              @map("userId")
  slug               String?             @unique
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt

  @@index([slug], name: "slug")
}

model AttentionSchedule {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant    Restaurant    @relation(fields: [restaurant_id], references: [id])
  restaurant_id String        @db.Uuid
  day_name      String
  day_number    Int
  opnenig_hours String
  ending_hours  String
  reservations  Reservation[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model Diner {
  id          String        @id @unique
  sub         String?       @unique
  first_name  String
  last_name   String?
  phone       String?
  email       String        @unique
  birthday    String?
  reservation Reservation[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model Reservation {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attention_schedule    AttentionSchedule @relation(fields: [attention_schedule_id], references: [id])
  attention_schedule_id String            @db.Uuid
  diner                 Diner             @relation(fields: [diner_id], references: [id])
  diner_id              String
  date                  String
  people_quantity       Int
  message               String?
  reservation_status_id ReservationStatus @relation(fields: [status_id], references: [id])
  status_id             Int
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
}

model ReservationStatus {
  id          Int           @id @default(autoincrement())
  reservation Reservation[]
  status      String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}
